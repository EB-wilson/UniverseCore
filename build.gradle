import java.util.jar.JarEntry
import java.util.jar.JarOutputStream

apply plugin: "java-library"

version '1.0'

ext{
  //the build number that this mod is made for
  mindustryVersion = 'v135.2'
  //version of SDK you will be using
  minSdkAPI = 30
  sdkRoot = System.getenv("ANDROID_HOME")
}

repositories{
  mavenCentral()
  maven{ url 'https://www.jitpack.io' }
}

allprojects{
  tasks.withType(JavaCompile){
    options.encoding = "UTF-8"

    options.forkOptions.jvmArgs.addAll([
        "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
    ])
  }

  tasks.withType(JavaCompile){
    options.compilerArgs.addAll(['--release', '11'])
  }

  tasks.withType(Jar){
    archiveFileName = "${project.name}.jar"
  }
}

configure(project(":annotations")) {
  tasks.withType(JavaCompile){
    options.fork = true
  }
}

dependencies {
  implementation project(":core")
  implementation project(":abstract")
  implementation project(":abstract2")
  implementation project(":utilities")
  implementation project(":mindustry")
  compileOnly project(":android")
  compileOnly project(":desktop")
  compileOnly project(":annotations")
}

jar{
  archiveFileName = "${rootProject.name}-base.jar"

  from{
    (subprojects - [project(":android"), project(":desktop"), project(":annotations")]).collect{zipTree("${it.buildDir}/libs/${it.name}.jar")}
  }
}

task buildAndroid(type: Jar){
  dependsOn jar

  archiveFileName = "${rootProject.name}-android.jar"

  from{[
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-base.jar"),
      zipTree("${project(":android").buildDir}/libs/android.jar")
  ]}

  doLast {
    try {
      def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

      //collect dependencies needed for desugaring
      def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

      def d8 = new File("$sdkRoot/build-tools/").listFiles().find {
        it.listFiles().any {
          it.name.contains("d8")
        } && Integer.valueOf(it.name.substring(0, 2)) >= minSdkAPI
      }.listFiles().find { it.name.contains("d8") }

      System.out.println("build android dex,,,")

      //dex and desugar files - this requires d8 in your PATH
      "$d8 $dependencies --min-api 30 --output ${rootProject.name}-android.jar ${project.archivesBaseName}-android.jar"
          .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    } catch (Throwable ignored) {
      System.out.println("[WARNING] d8 tool or platform tools was not found, if you was installed android SDK, please check your environment variable")

      delete(
          files("${rootProject.buildDir}/libs/${rootProject.name}-android.jar")
      )

      def out = new JarOutputStream(new FileOutputStream("${rootProject.buildDir}/libs/${rootProject.name}-android.jar"))
      out.putNextEntry(new JarEntry("non-androidMod.txt"))
      StringReader reader = new StringReader(
          "this mod is don't have classes.dex for android, please consider recompile with a SDK or run this mod on desktop only"
      )

      int r
      while((r = reader.read()) != -1){
        out.write(r)
        out.flush()
      }
      out.close()
    }
  }
}

task buildDesktop(type: Jar){
  dependsOn "jar"

  archiveFileName = "${rootProject.name}-desktop.jar"

  from{[
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-base.jar"),
      zipTree("${project(":desktop").buildDir}/libs/desktop.jar")
  ]}
}

def deleteBase = true;

task buildMod(type: Jar){
  dependsOn "buildAndroid"
  dependsOn "buildDesktop"

  archiveFileName = "${rootProject.name}.jar"

  from(
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-android.jar"),
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
  )

  from(rootDir){
    include "mod.hjson"
    include "icon.png"
  }

  from("assets/"){
    include "**"
  }

  doLast {
    delete("${rootProject.buildDir}/libs/${rootProject.name}-android.jar")
    if (deleteBase) {
      delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
      delete("${rootProject.buildDir}/libs/${rootProject.name}-base.jar")
    }
  }
}

task buildLib(type: Jar){
  dependsOn "buildDesktop"

  archiveFileName = "${rootProject.name}-lib.jar"

  from{[
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar"),
      zipTree("${project(":annotations").buildDir}/libs/annotations.jar")
  ]}

  doLast {
    if (deleteBase) {
      delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
      delete("${rootProject.buildDir}/libs/${rootProject.name}-base.jar")
    }
  }
}

task toMod{
  dependsOn "buildMod"

  doLast {
    if (project.properties.get("modOutputDir") != null){
      copy {
        into("$modOutputDir/")
        from("${rootProject.buildDir}/libs/${rootProject.name}.jar")
      }

      delete(
          files("${rootProject.buildDir}/libs/${rootProject.name}.jar")
      )
    }
    else System.out.println("[Note] field \"libOutputDir\" was not seted, jar file will output to build dir(/build/libs/)")
  }
}

task toLib{
  dependsOn "buildLib"

  doLast {
    if (project.properties.get("libOutputDir") != null){
      copy {
        into("$libOutputDir/")
        from("${rootProject.buildDir}/libs/${rootProject.name}-lib.jar")
      }

      delete(
          files("${rootProject.buildDir}/libs/${rootProject.name}-lib.jar")
      )
    }
    else System.out.println("[Note] field \"libOutputDir\" was not seted, jar file will output to build dir(/build/libs/)")
  }
}

task deploy{
  deleteBase = false

  dependsOn "toLib"
  dependsOn "toMod"

  doLast {
    delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
    delete("${rootProject.buildDir}/libs/${rootProject.name}-base.jar")
  }
}

task build(overwrite: true){
  deleteBase = false

  dependsOn "buildLib"
  dependsOn "buildMod"

  doLast {
    delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
    delete("${rootProject.buildDir}/libs/${rootProject.name}-base.jar")
  }
}
