import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
}

ext{
  uncVersion = '1.8.9'

  //the build number that this mod is made for
  mindustryVersion = 'v146'
  //version of SDK you will be using
  minSdkAPI = 30
  //version of JavaDynamilizer
  JDERVersion = 'V1.8-A3'
  sdkRoot = System.getenv("ANDROID_HOME")
}

group 'com.github.EB-wilson'
version "$uncVersion"

configure(allprojects - project(":annotations")){
  apply plugin: 'maven-publish'

  tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
  }

  tasks.withType(Jar){
    archiveFileName = "${project.name}.jar"
  }
}

repositories{
  mavenCentral()
  mavenLocal()
  maven { url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository' }
  maven{ url 'https://www.jitpack.io' }
}

dependencies {
  implementation project(":core")
  implementation project(":abstract")
  implementation project(":implabstract")
  implementation project(":utilities")
  implementation project(":mindustry")
  implementation project(":dynamilizer")

  compileOnly project(":android")
  compileOnly project(":android26")
  compileOnly project(":desktop")
  compileOnly project(":desktop9")
  compileOnly project(":annotations")

  annotationProcessor project(":annotations")
}

shadowJar{
  dependsOn project(":android").getTasksByName("shadowJar", true)
  dependsOn project(":desktop9").getTasksByName("shadowJar", true)
  archiveFileName = "${rootProject.name}-base.jar"
}

task buildAndroid(type: Jar){
  dependsOn project(":android26").getTasksByName("buildModule", true)
  dependsOn shadowJar

  archiveFileName = "${rootProject.name}-android.jar"

  from{[
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-base.jar"),
      zipTree("${project(":android").buildDir}/libs/android.jar")
  ]}

  doLast {
    try {
      def platformRoot = new File("$sdkRoot/platforms").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

      //collect dependencies needed for desugaring
      def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

      try{
        System.out.println("build android dex...")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${rootProject.name}-android.jar ${project.archivesBaseName}-android.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
      }
      catch(Throwable ignored) {
        def d8 = new File("$sdkRoot/build-tools/").listFiles().find {
          it.listFiles().any {
            it.name.contains("d8")
          } && Integer.valueOf(it.name.substring(0, 2)) >= minSdkAPI
        }.listFiles().find { it.name.contains("d8") }

        "$d8 $dependencies --min-api 14 --output ${rootProject.name}-android.jar ${project.archivesBaseName}-android.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
      }
    } catch (Throwable ignored) {
      System.out.println("[WARNING] d8 tool or platform tools was not found, if you was installed android SDK, please check your environment variable")

      delete(
          files("${rootProject.buildDir}/libs/${rootProject.name}-android.jar")
      )

      def out = new JarOutputStream(new FileOutputStream("${rootProject.buildDir}/libs/${rootProject.name}-android.jar"))
      out.putNextEntry(new JarEntry("non-androidMod.txt"))
      StringReader reader = new StringReader(
          "this mod is don't have classes.dex for android, please consider recompile with a SDK or run this mod on desktop only"
      )

      int r
      while((r = reader.read()) != -1){
        out.write(r)
        out.flush()
      }
      out.close()
    }
  }
}

task buildDesktop(type: Jar){
  dependsOn shadowJar

  archiveFileName = "${rootProject.name}-desktop.jar"

  from{[
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-base.jar"),
      zipTree("${project(":desktop").buildDir}/libs/desktop.jar"),
      zipTree("${project(":desktop9").buildDir}/libs/desktop9.jar")
  ]}
}

def deleteBase = true

task buildMod(type: Jar){
  dependsOn "buildAndroid"
  dependsOn "buildDesktop"

  archiveFileName = "${rootProject.name}-build.jar"

  from(
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-android.jar"),
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
  )

  from(rootDir){
    include "mod.hjson"
    include "icon.png"
  }

  from("assets/"){
    include "**"
  }

  doLast {
    File srcFile = new File("${project(":android26").buildDir}/libs/${rootProject.name}-android-api26.jar")

    File file = new File("${rootProject.buildDir}/libs/${rootProject.name}-build.jar")
    JarFile jf = new JarFile(file)

    File target = new File("${rootProject.buildDir}/libs/${rootProject.name}.jar")
    target.createNewFile()

    FileOutputStream fiOut = new FileOutputStream(target)
    JarOutputStream out = new JarOutputStream(fiOut)

    out.putNextEntry(new JarEntry("android-api-26.jar"))

    FileInputStream read = new FileInputStream(srcFile)
    out.write(read.readAllBytes())
    out.closeEntry()
    out.flush()
    read.close()

    for(JarEntry entry : jf.entries().asIterator()){
      InputStream entryIn = jf.getInputStream(entry)
      out.putNextEntry(new JarEntry(entry))
      out.write(entryIn.readAllBytes())
      out.closeEntry()
      out.flush()
      entryIn.close()
    }
    out.close()
    file.deleteOnExit()

    delete("${rootProject.buildDir}/libs/${rootProject.name}-android.jar")
    if (deleteBase) {
      delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
    }
  }
}

task buildLib(type: Jar){
  dependsOn "buildDesktop"

  archiveFileName = "${rootProject.name}-lib.jar"

  from{[
      zipTree("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar"),
      zipTree("${project(":annotations").buildDir}/libs/annotations.jar")
  ]}

  doLast {
    if (deleteBase) {
      delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
    }
  }
}

task toMod{
  dependsOn "buildMod"

  doLast {
    if (project.properties.get("modOutputDir") != null && !project.properties.get("modOutputDir").isEmpty()){
      copy {
        into("$modOutputDir/")
        from("${rootProject.buildDir}/libs/${rootProject.name}.jar")
      }

      if (project.properties.get("deleteBuildModFile") == "true"){
        delete(
            files("${rootProject.buildDir}/libs/${rootProject.name}.jar")
        )
      }
    }
    else System.out.println("[Note] field \"libOutputDir\" was not seted, jar file will output to build dir(/build/libs/)")
  }
}

task toLib{
  dependsOn "buildLib"

  doLast {
    if (project.properties.get("libOutputDir") != null && !project.properties.get("libOutputDir").isEmpty()){
      copy {
        into("$libOutputDir/")
        from("${rootProject.buildDir}/libs/${rootProject.name}-lib.jar")
      }


      if (project.properties.get("deleteBuildLibFile") == "true") {
        delete(
            files("${rootProject.buildDir}/libs/${rootProject.name}-lib.jar")
        )
      }
    }
    else System.out.println("[Note] field \"libOutputDir\" was not seted, jar file will output to build dir(/build/libs/)")
  }
}

task deploy{
  deleteBase = false

  dependsOn "toLib"
  dependsOn "toMod"

  doLast {
    delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
  }
}

task buildProject{
  deleteBase = false

  dependsOn "buildLib"
  dependsOn "buildMod"

  doLast {
    delete("${rootProject.buildDir}/libs/${rootProject.name}-desktop.jar")
  }
}

task debugMod(dependsOn: classes, type: JavaExec){
  dependsOn toMod

  main = "-jar"
  args = [
      project.properties.get("debugGamePath"),
      "-debug"
  ]
}

