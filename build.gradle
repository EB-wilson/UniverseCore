apply plugin: "java"

version '1.0'
sourceSets.main.java.srcDirs = ["src"]

sourceCompatibility = 11
targetCompatibility = 11

ext{
  //the build number that this mod is made for
  mindustryVersion = 'v131'
  //version of SDK you will be using
  sdkVersion = '30.0.3'
  sdkRoot = '/home/EBwilson/android-sdk/'
  
  libOutputDir = '/home/EBwilson/IdeaProjects/Singularity/lib/'
  modOutputDir = '/home/EBwilson/sd/Android/data/io.anuke.mindustry/files/mods'
  
  doExec = { cmd ->
    def proc = cmd.execute(null, new File("$buildDir/libs"))
    proc.waitForProcessOutput(System.out, System.err)
  }
}

repositories{
  mavenCentral()
  maven{ url 'https://www.jitpack.io' }
}

dependencies{
  compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
  compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
  
  compileOnly project(":desktop")
  compileOnly project(":android")
  compile project(":abstractCore")
}

allprojects{
  tasks.withType(JavaCompile){
    if(JavaVersion.current() != JavaVersion.VERSION_11){
      options.compilerArgs.addAll(['--release', '11'])
    }
  }
}

jar{
  archiveFileName = "${rootProject.name}-core.jar"
}

task buildAndroid(type: Jar){
  dependsOn("jar")
  
  archiveFileName = "${rootProject.name}-androidLib.jar"
  
  from{[
      zipTree("$buildDir/libs/${rootProject.name}-core.jar"),
      zipTree("${project(":classes").buildDir}/libs/${project(":classes").name}.jar"),
      zipTree("${project(":abstractCore").buildDir}/libs/${project(":abstractCore").name}.jar"),
      zipTree("${project(":android").buildDir}/libs/${rootProject.name}-partAndroid.jar")
  ]}
  
  doLast {
    def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
  
    //collect dependencies needed for desugaring
    def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")
  
    //dex and desugar files - this requires d8 in your PATH
    "$sdkRoot/build-tools/$sdkVersion/d8 $dependencies --min-api 14 --output ${rootProject.name}-androidLib.jar ${rootProject.name}-androidLib.jar"
        .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
  }
}

task buildDesktop(type: Jar){
  dependsOn("jar")
  
  archiveFileName = "${rootProject.name}-desktopLib.jar"
  
  from{[
      zipTree("$buildDir/libs/${rootProject.name}-core.jar"),
      zipTree("${project(":classes").buildDir}/libs/${project(":classes").name}.jar"),
      zipTree("${project(":abstractCore").buildDir}/libs/${project(":abstractCore").name}.jar"),
      zipTree("${project(":desktop").buildDir}/libs/${rootProject.name}-partDesktop.jar")
  ]}
}

task toLib(type: Jar){
  dependsOn("buildDesktop")
  dependsOn("buildAndroid")
  
  archiveFileName = "${rootProject.name}-lib.jar"
  
  from{[
      zipTree("$buildDir/libs/${rootProject.name}-desktopLib.jar"),
      zipTree("$buildDir/libs/${rootProject.name}-androidLib.jar")
  ]}
  
  if(libOutputDir != null){
    delete("$libOutputDir/${rootProject.name}-lib.jar")
    copy {
      into("$libOutputDir/")
      from("$buildDir/libs/${rootProject.name}-lib.jar")
    }
  }
  
  doLast {
    delete("${project(":classes").buildDir}/libs/${project(":classes").name}.jar")
    delete("${project(":abstractCore").buildDir}/libs/${project(":abstractCore").name}.jar")
    delete("$buildDir/libs/${rootProject.name}-desktopLib.jar")
    delete("$buildDir/libs/${rootProject.name}-androidLib.jar")
    delete("$buildDir/libs/${rootProject.name}-core.jar")
  }
}

task build(type: Jar, overwrite: true){
  dependsOn("toLib")
  
  archiveFileName = "${rootProject.name}.jar"
  
  from{ zipTree("$buildDir/libs/${rootProject.name}-lib.jar") }
  
  from(rootDir){
    include "mod.hjson"
    include "icon.png"
  }
  
  from("assets/"){
    include "**"
  }
  
  doLast{
    if(modOutputDir != null){
      copy {
        into("$modOutputDir/")
        from("$buildDir/libs/${rootProject.name}.jar")
      }
    }
  }
}

task toMod{
  dependsOn("build")
  
  doLast { delete("$buildDir/libs/${rootProject.name}-lib.jar") }
}

project(":desktop"){
  apply plugin: 'java'
  
  repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
  }
  
  dependencies {
    compile project(":abstractCore")
  }
  
  compileJava.options.fork = true
  
  jar{
    archiveFileName = "${rootProject.name}-partDesktop.jar"
  }
}

project(":android"){
  apply plugin: 'java'
  
  repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
  }
  
  dependencies {
    compile project(":abstractCore")
  }
  
  jar{
    archiveFileName = "${rootProject.name}-partAndroid.jar"
  }
}

project(":classes"){
  apply plugin: 'java'
  
  repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
  }
  
  dependencies {
    compile project(":abstractCore")
  }
}

project(":abstractCore"){
  apply plugin: 'java'
  
  repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
  }
}

